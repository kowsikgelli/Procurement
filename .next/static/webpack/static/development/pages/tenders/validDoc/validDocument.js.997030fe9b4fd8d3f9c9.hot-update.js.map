{"version":3,"file":"static/webpack/static/development/pages/tenders/validDoc/validDocument.js.997030fe9b4fd8d3f9c9.hot-update.js","sources":["webpack:///./pages/tenders/validDoc/validDocument.js"],"sourcesContent":["import React from 'react';\nimport Layout from '../../../components/Layout';\nimport {Form,Button,Message} from 'semantic-ui-react'\nimport instance from '../../../ethereum/tender';\nimport web3 from '../../../ethereum/web3';\nimport {Router} from '../../../routes';\nimport {sha256} from 'js-sha256';\nclass validDocument extends React.Component{\n\tstate={\n\t\terrorMessage:'',\n\t\tloading:false,\n\t\tfileHash:'',\n\t\tisButtonDisabled:false,\n\t\texactTwoFiles:false,\n\t\tvalid:false\n\t}\n\tgenerateHash(file){\n\t\tconst reader=new FileReader();\n\t\treader.onload=()=>{\n\t\t\tlet hash=sha256(reader.result)\n\t\t\tlet result=this.state.fileHash;\n\t\t\tresult=result+hash;\n\t\t\tthis.setState({fileHash:result})\n\t\t\tconsole.log(\"result:\"+this.state.fileHash)\n\t\t}\n\t\treader.readAsText(file);\n\t}\n\tcombinehash=(event)=>{\n\t\tevent.preventDefault();\n\t\tif(!!this.state.fileHash){\n\t\t\tthis.setState({fileHash:sha256(this.state.fileHash),isButtonDisabled:true})\n\t\t}\n\t}\n\tuploadFile=(event)=>{\n\t\ttry{\n\t\t\tconsole.log(event.target.files.length)\n\t\t\tif(event.target.files.length==2){\n\t\t\t\tfor(let i=0;i<event.target.files.length;i++){\n\t\t\t\t\tconsole.log(\"hi\")\n\t\t\t\t\tthis.generateHash(event.target.files[i]);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tthrow \"select exact two files\";\n\t\t\t}\n\t\t}catch(err){\n\t\t\tthis.setState({errorMessage:err});\n\t\t\tconsole.log(err)\n\t\t}\n\t\t// console.log(event.target.files[0])\n\t}\n\tonSubmit=async (event)=>{\n\t\tevent.preventDefault();\n\t\tthis.setState({loading:true,errorMessage:''});\n\t\ttry{\n\t\t\t// const accounts=await web3.eth.getAccounts();\n\t\t\tconst bidCount=await instance.methods.bidCount().call();\n\t\t\tconsole.log(bidCount)\n\t\t\tfor(let i=1;i<=bidCount;i++){\n\t\t\t\tconsole.log(\"valids\")\n\t\t\t\tconst singleBid=await instance.methods.Bids(i).call();\n\t\t\t\tif(singleBid.fileHash==this.state.fileHash){\n\t\t\t\t\tconsole.log(\"if\")\n\t\t\t\t\tthis.setState({valid:true});\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(this.state.valid);\n\t\t\t// Router.pushRoute('/tenders/Admin/adminDetails')\n\t\t\t// Router.pushRoute(`/tenders/${this.props.tenderId}`);\n\t\t}catch(err){\n\t\t\tthis.setState({errorMessage:err.message});\n\t\t}\n\t\tthis.setState({loading:false})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<Layout>\n\t\t\t\t<Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} success={!!this.state.valid}>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<label>upload technical and financial bids</label>\n\t\t\t\t\t\t<input type='file' multiple onChange={this.uploadFile}/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Button  size='small' onClick={this.combinehash} disabled={this.state.isButtonDisabled}>Generate Hash</Button>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<label>Documents Hash (sha256)</label>\n\t\t\t\t\t\t<input type=\"text\" value={this.state.fileHash}/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Message success header=\"Document is Valid\"/>\n\t\t\t\t\t<Message error header=\"Oops!!\" content={this.state.errorMessage} />\n\t\t\t\t\t<Button loading={this.state.loading} size='large' primary type='submit'>Submit</Button>\n\t\t\t\t</Form>\n\t\t\t</Layout>\n\t\t\t)\n\t}\n}\nexport default validDocument;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AARA;AAAA;AACA;AADA;AASA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAdA;AAOA;AAPA;AAAA;AACA;AADA;AAeA;AAEA;AACA;AAlBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AACA;AApBA;AAqBA;AAAA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAnCA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;AA+CA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAvFA;AACA;AAwFA;;;;A","sourceRoot":""}