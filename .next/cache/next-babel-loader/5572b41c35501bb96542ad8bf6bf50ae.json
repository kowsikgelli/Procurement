{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport Web3 from 'web3'; // let web3;\n// if(typeof window!=='undefined' && typeof window.web3 !=='undefined' ){\n//   web3=new Web3(window.web3.currentProvider);\n// }else{\n//   const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/6c47f50d50a54cf3bd3527414b6c3d4c'\n//   )\n//   web3=new Web3(provider);\n// }\n\nconst getWeb3 = () => new _Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/6c47f50d50a54cf3bd3527414b6c3d4c\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/kowsik/Desktop/procurement/ethereum/web3.js"],"names":["Web3","getWeb3","resolve","reject","window","addEventListener","ethereum","web3","enable","error","currentProvider","console","log","provider","providers","HttpProvider"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,MACd,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASI,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACF;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;AACAN,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OALD,CAKE,OAAOE,KAAP,EAAc;AACdN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD;AACF,KAVD,CAWA;AAXA,SAYK,IAAKL,MAAM,CAACG,IAAZ,EAAkB;AACrB;AACA,cAAMA,IAAI,GAAC,IAAIP,IAAJ,CAASI,MAAM,CAACG,IAAP,CAAYG,eAArB,CAAX;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAV,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMM,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,+DADe,CAAjB;AAGA,gBAAMR,IAAI,GAAG,IAAIP,IAAJ,CAASa,QAAT,CAAb;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAV,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD;AACF,GA7BD;AA8BD,CAhCD,CADF;;AAkCA,eAAeN,OAAf","sourcesContent":["import Web3 from 'web3';\n\n// let web3;\n// if(typeof window!=='undefined' && typeof window.web3 !=='undefined' ){\n//   web3=new Web3(window.web3.currentProvider);\n// }else{\n//   const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/6c47f50d50a54cf3bd3527414b6c3d4c'\n//   )\n//   web3=new Web3(provider);\n// }\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if ( window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3=new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://rinkeby.infura.io/v3/6c47f50d50a54cf3bd3527414b6c3d4c\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\nexport default getWeb3;"]},"metadata":{},"sourceType":"module"}